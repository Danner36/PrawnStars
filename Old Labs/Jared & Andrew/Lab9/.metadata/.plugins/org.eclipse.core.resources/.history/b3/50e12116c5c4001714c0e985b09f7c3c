//LIBRARIES

#include "init.h"
#include "uart.h" //Lab 5
#include "wifi.h"
#include "adc.h" //Lab 6
#include "sonar.h" //Lab 7
#include "servo.h" //Lab 8
#include <string.h>
#include <inc/tm4c123gh6pm.h>
#include "driverlib/interrupt.h"
#include <stdio.h>



//FUNCTION PROTOTYPES

int average(int array[]);
float distanceIRConversion (float result);
int findSmallest(int array[]);
int findSmallestIndex(int array[]);



//GLOBAL VARIABLES

//Counter to keep track of detected objects.
char numObjects = 0;

//Beginning angle, ending angle, and the total angle width of the object.
int angle1 = 0, angle2 = 0, totalAngle = 0;

//Holds the current cycles Sonar Distance.
float sonarDis = 0.0;

//Holds the current cycles IR Distance.
float irDis = 0.0;

//Holds the distances from the sonar device.
int sonarDisArr[50];

//Holds the distance averages for each object.
int avgDisArr[50];

//Measurement number, increment every 2 degrees
int disIndex = 0, avgIndex = 0;

//Holds the pulse period of each index object. Used to turn back to the smallest object.
int angleArr[50];

//Iterator used for angleArr
int angleIter = 0;

//Angular Size
int angularSize[50];

//Used to keep track of this projects status as a state machine.
enum status {NONE , DETECTED, SCANNING};
enum status STATE = NONE;



//FUNCTIONS AND METHODS

/**
 * Initializes all peripherals and resets the position of the device.
 */
void intialize(){
    init_All();
    adc_init();
    lcd_init();
    uart_init();

    //Enables WiFi.
    int established = WiFi_start("password");
    timer_waitMillis(7000);

    //Checks if WiFi has complete initialization.
    WiFi_Check();

    //Resets the servo's position to zero degrees (Far right).
    int pulse_period = PERIOD + CW;
    move_servo(pulse_period);

    //1.5 second delay to ensure servo reaches the 0th degree.
    timer_waitMillis(1500);

    //Sends the header information to Putty.
    sendHeader();

    //Initializes each array to contain only zeros.
    for (i = 0; i < 50; i++) {
        sonarDisArr[i] = 0;
        avgDisArr[i] = 0;
        angleArr[i] = 0;
        angularSize[i] = 0;
    }
}


/**
 * MAIN PROGRAM. Runs loop, collects data, performs calculations, and transmits data.
 */
void main() {

    //Initializes all devices and variables.
    initialize();

    //Main loop. Iterates servo from degree 0 to 180 while capturing data. Also
    //   performs calculations and transmits useful info to Putty via WiFi.
    for (i = 0; i <= 180; i += 2, disIndex++) {

        //Moves the servo two degrees.
        pulse_period += DEGREE*2;
        move_servo(pulse_period);

        //Collects data from both IR & Sonar sensors.
        collectData();

        //Sends the current most cycles data to Putty.
        sendData();

        //Object has been detected. Updates state machine.
        if ((irDis < 100) && (sonarDis < 100) && (STATE == NONE || STATE == )) {

            //Object has been detected. Updates state machine.
            STATE = DETECTED;

            //Captures the angle at which the object is first detected.
            angle1 = i;

            //Increments the number of objects detected by 1.
            numObjects++;

            //?????
            distanceIndex = 0;

        }

        //Object has been lost.
        else if ((STATE == DETECTED || STATE == SCANNING) && (irDis > 87 || irDis < 35)) {

            //Captures the angle at which the object is last detected.
            angle2 = i;

            //Calculates the total angle width of the object.
            totalAngle = angle2 - angle1;

            //
            STATE = SCANNING;

            //???
            angleArr[angleIter] = ((angle1 + angle2)/2) - 2;

            //???
            angularSize[angleIter] = totalAngle;

            //Calculate distance average
            avgDisArr[avgIndex] = avg(distances);
            avgIndex++;

            int k = 0;

            //Reset distance array.
            for (k = 0; k < 50; k++) {
                sonarArr[k] = 0;
            }

            //Increments the iterator.
            angleIter++;

            //Sends newline over WiFi for formatting purposes.
            uart_sendChar('\n');
        }

        //distance collection
        if (scanning == 3) {
            sonarArr[disIndex] = sonarDis;
        }

    }

    //Scan Complete, print results
    lcd_printf("Object Num: %d\nSmallest: %d", numObjects, findSmallestIndex(angularSize));

    //Turn toward smallest object.
    int temp = degreeOfObject[findSmallestIndex(angularSize)];

    //Calculate final move
    move_servo(PERIOD + CW + (temp*DEGREE));

    //Waits for servo to complete turn before power off and or stall.
    timer_waitMillis(1000);
}


/**
 * Collects data from both Sonar and IR sensors.
 */
void collectData(){
    sonarDis = ping_read();
    irDis = getIRtoDis((float)adc_Read());
}


/**
 * Sends current information to Putty.
 */
void sendData(){
    char data[50];
    sprintf(data, "%i\t\t%0.1f\t\t\t%0.2f", i, distanceIR, distanceSonar);

    uart_sendChar('\r');

    int j = 0;
    for(j = 0; j < strlen(data); j++) {
       uart_sendChar(data[j]);
    }

    uart_sendChar('\n');
}


/**
 * Sends Header information to Putty.
 */
void sendHeader(){

    char* header = "Degrees\t\tIR Distance (cm)\tSonar Distance (cm)";

    //Resets the position of the cursor to 2 lines below and the beginning of the line.
    uart_sendChar('\n');
    uart_sendChar('\n');
    uart_sendChar('\r');


    int i = 0;
    //Iterators through the array, sends each character to Putty via WiFi.
    for(i = 0; i < strlen(header); i++){
        uart_sendChar(header[i]);
    }

    //New lines.
    uart_sendChar('\n');
    uart_sendChar('\n');
}


/**
 * Calculates the conversion from IR input to distance.
 */
float getIRtoDis(float result){
    return (float)(1.682* pow(10,7))/(pow(result,500/239)) + 10;
}


/**
 * Calculates and returns the average of the passed in array.
 */
int getAverage(int array[]) {

    int i, sum = 0;

    for (i = 0; i < sizeof(array)/4; i++) {
        if (array[i] == 0){
            break;
        }
        else{
            sum += array[i];
        }
    }

    return (sum / i);
}


/**
 * Finds the smallest number in the array and returns its value.
 */
int getSmallest(int array[]) {
    int i, temp = array[0];

    for (i = 1; i < sizeof(array)/4; i++) {
        if (array[i] == 0) {
            continue;
        }
        if (array[i] < temp) {
            temp = array[i];
        }
    }

    return temp;
}


/**
 * Finds the smallest numbers element in the array and returns its position.
 */
int getSmallestIndex(int array[]) {
    int i, temp = 0;

    for (i = 1; i < sizeof(array)/4; i++) {
        if (array[i] == 0) {
            continue;
        }
        if (array[i] < temp) {
            temp = i;
        }
    }

    return temp;
}
